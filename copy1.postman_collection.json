{
	"info": {
		"_postman_id": "e9b4df21-81af-4ce5-bb1f-bdd656e63832",
		"name": "Spring PetClinic Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticaton",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"secondAdmin\",\r\n    \"password\": \"password\",\r\n    \"enabled\": true,\r\n    \"roles\": [\r\n    \t{ \"name\" : \"OWNER_ADMIN\" }\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Owners",
			"item": [
				{
					"name": "Get Owners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"console.log(response.length);\r",
									"console.log(response['response.lenth']);\r",
									"\r",
									"pm.test(\"Verify Owners List is Displayed in Response \" , () => console.log(response));\r",
									"\r",
									"pm.test(\"Total No of Owners Displayed  : \" +response.length , function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(response.length);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/owners",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"firstname\",\"Mona\");\r",
									"pm.environment.set(\"lastname\",\"Magnus\");\r",
									"pm.environment.set(\"address\",\"20 Avenue St.\");\r",
									"pm.environment.set(\"city\",\"Stockholm\");\r",
									"pm.environment.set(\"telephone\",\"2323454567\");\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"ownerID\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"Check all Field have correct Value :\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Mona\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Magnus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"20 Avenue St.\");\r",
									"    pm.expect(pm.response.text()).to.include(\"Stockholm\");\r",
									"    pm.expect(pm.response.text()).to.include(\"2323454567\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check all Field with Invalid Data :\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"David\");\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"Jacob\");\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"12345.\");\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"Gothenburg\");\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"phone\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successfully Created Owner \", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"   pm.environment.set(\"results\", parseInt(environment.results) + 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \r\n        \"firstName\": \"Mona\",\r\n        \"lastName\": \"Magnus\",\r\n        \"address\": \"20 Avenue St.\",\r\n        \"city\": \"Stockholm\",\r\n        \"telephone\": \"2323454567\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/owners",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									" \r",
									"pm.globals.get(\"ownerID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Owner Information is not empty\", function () {\r",
									"    pm.expect(jsonData.owners).to.not.eql(\"\");\r",
									"});\r",
									" \r",
									"pm.test(\"Check the contents of Owner Data are not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(null);\r",
									"});\r",
									" \r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));\r",
									"\r",
									"pm.test(\"Verify the Data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.address).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.telephone).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.pets).to.be.an(\"array\");\r",
									" });\r",
									"\r",
									" pm.test(\"Verify the Data display in Response is correct \", () => {\r",
									"  pm.expect(jsonData.firstName).to.equal(\"Mona\");\r",
									"  pm.expect(jsonData.lastName).to.equal(\"Magnus\");\r",
									"  pm.expect(jsonData.address).to.equal(\"20 Avenue St.\");\r",
									"  pm.expect(jsonData.city).to.equal(\"Stockholm\");\r",
									"  pm.expect(jsonData.telephone).to.equal(\"2323454567\");\r",
									"   });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/owners/{{ownerID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners",
								"{{ownerID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \r\n        \"firstName\": \"Ketty\",\r\n        \"lastName\": \"Perry\",\r\n        \"address\": \"21 Main St.\",\r\n        \"city\": \"New York\",\r\n        \"telephone\": \"4433556677\",\r\n        \"pets\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/owners/{{ownerID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners",
								"{{ownerID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the update of owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									" \r",
									"pm.globals.get(\"ownerID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Owner Information is not empty\", function () {\r",
									"    pm.expect(jsonData.owners).to.not.eql(\"\");\r",
									"});\r",
									" \r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));\r",
									"\r",
									"pm.test(\"Verify the Data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.address).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.telephone).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.pets).to.be.an(\"array\");\r",
									" });\r",
									"\r",
									" pm.test(\"Verify Updated data in Response is correct \", () => {\r",
									"  pm.expect(jsonData.firstName).to.equal(\"Ketty\");\r",
									"  pm.expect(jsonData.lastName).to.equal(\"Perry\");\r",
									"  pm.expect(jsonData.address).to.equal(\"21 Main St.\");\r",
									"  pm.expect(jsonData.city).to.equal(\"New York\");\r",
									"  pm.expect(jsonData.telephone).to.equal(\"4433556677\");\r",
									"   });\r",
									"\r",
									"   pm.test(\"Verify Old data is not displayed \", () => {\r",
									"  pm.expect(jsonData.firstName).to.not.equal(\"Mona\");\r",
									"  pm.expect(jsonData.lastName).to.not.equal(\"Magnus\");\r",
									"  pm.expect(jsonData.address).to.not.equal(\"20 Avenue St.\");\r",
									"  pm.expect(jsonData.city).to.not.equal(\"Stockholm\");\r",
									"  pm.expect(jsonData.telephone).to.not.equal(\"2323454567\");\r",
									"   });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/owners/{{ownerID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners",
								"{{ownerID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PetTypes",
			"item": [
				{
					"name": "Get PetTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"const response = pm.response.json();\r",
									"console.log(response);\r",
									"console.log(response.length);\r",
									"console.log(response['response.lenth']);\r",
									"\r",
									"pm.test(\"Verify PetType List is Displayed in Response \" , () => console.log(response));\r",
									"\r",
									"pm.test(\"Total No of PetTypes Displayed  : \" +response.length , function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(response.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pettypes",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New PetType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"name\",\"insect\");\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"petTypeID\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"Verify if Created Pettype is added in Database \", function () {\r",
									"     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     });\r",
									"\r",
									"pm.test(\"Verify Created Pettype is not Empty\", () => pm.expect(jsonData.pettypes).to.not.eql(\"\"));\r",
									"\r",
									"pm.test(\"Check Pettype is Added is Correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"insect\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Created Pettype with invalid input\", () => pm.expect(jsonData.pettypes).to.not.eql(\"bird\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \r\n        \"name\": \"insect\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pettypes",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PetType by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.globals.get(\"petTypeID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Pettype Information is not empty\", function () {\r",
									"    pm.expect(jsonData.pettypes).to.not.eql(\"\");\r",
									"});\r",
									" \r",
									"pm.test(\"Check the contents of Pettype Data are not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(null);\r",
									"});\r",
									" \r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200) );\r",
									"\r",
									"pm.test(\"Verify the Pettype is displayed as expected \", () => {\r",
									"  pm.expect(pm.response.text()).to.include(\"insect\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Pettype with invalid output : \", () => {\r",
									"  pm.expect(pm.response.text()).to.not.include(\"bird\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pettypes/{{petTypeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes",
								"{{petTypeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update PetType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"cow\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pettypes/{{petTypeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes",
								"{{petTypeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the Updated PetType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.globals.get(\"petTypeID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Pettype Information is not empty\", function () {\r",
									"    pm.expect(jsonData.owners).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check Pettype is Updated \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"cow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check Pettype dont have old data \", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(\"insect\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pettypes/{{petTypeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes",
								"{{petTypeID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pet",
			"item": [
				{
					"name": "Get Pets List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 14,\r\n        \"name\": \"Meow\",\r\n        \"birthDate\": \"2020/06/11\",\r\n        \"type\": {\r\n            \"id\": 1,\r\n            \"name\": \"Cat\"\r\n        },\r\n        \"owner\": {\r\n            \"id\": 10,\r\n            \"firstName\": \"Carlos\",\r\n            \"lastName\": \"Estaban\",\r\n            \"address\": \"2335 Independence La.\",\r\n            \"city\": \"Waunakee\",\r\n            \"telephone\": \"6085555487\"\r\n        },\r\n        \"visits\": []\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pets",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"petID\", pm.response.json().id);\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/pets/\" +  pm.globals.get(\"petID\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"\r",
									"var status_code = 201;\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"\r",
									"pm.expect(pm.response.code).to.eql(201);\r",
									"\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response.status);\r",
									"\r",
									"pm.test(\"Status should be OK\", () => {\r",
									"    pm.expect(1).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the pet name \", function () {\r",
									"    pm.expect(jsonData.name).to.equal(\"Meow\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify the pet Birthday\", function () {\r",
									"    pm.expect(jsonData.birthDate).to.include(\"2020/05/13\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 0,\r\n        \"name\": \"Meow\",\r\n        \"birthDate\": \"2020/05/13\",\r\n        \"type\": {\r\n            \"id\": 1,\r\n            \"name\": \"cat\"\r\n        },\r\n        \"owner\": {\r\n            \"id\": {{pownerID}},\r\n            \"firstName\": \"George\",\r\n            \"lastName\": \"Franklin\",\r\n            \"address\": \"110 W. Liberty St\",\r\n            \"city\": \"Madison\",\r\n            \"telephone\": \"6085551023\"\r\n        },\r\n        \"visits\": []\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pets",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.globals.get(\"petID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Pet Information is not empty\", function () {\r",
									"    pm.expect(jsonData.pettypes).to.not.eql(\"\");\r",
									"});\r",
									"  \r",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200) );\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pets/{{petID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": {{petID}},\r\n        \"name\": \"Tuffy\",\r\n        \"birthDate\": \"2020/05/10\",\r\n        \"type\": {\r\n            \"id\": 2,\r\n            \"name\": \"dog\"\r\n        },\r\n        \"owner\": {\r\n            \"id\": {{pownerID}},\r\n            \"firstName\": \"George\",\r\n            \"lastName\": \"Franklin\",\r\n            \"address\": \"110 W. Liberty St\",\r\n            \"city\": \"Madison\",\r\n            \"telephone\": \"6085551023\"\r\n        },\r\n        \"visits\": []\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pets/{{petID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the Updated Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									" \r",
									"pm.globals.get(\"petID\", pm.response.json().id);\r",
									"pm.test(\"Verify that the Pet is not empty\", function () {\r",
									"    pm.expect(jsonData.owners).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Pet Name does not have old name\", function () {\r",
									"    pm.expect(jsonData.owners).to.not.eql(\"Meow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check Pet is Updated \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Tuffy\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pets/{{petID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Records",
			"item": [
				{
					"name": "Delete Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/owners/\" +  pm.globals.get(\"ownerID\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"pm.sendRequest(getRequest, function (err, res) {\r",
									"    if (err) { \r",
									"        console.log(err);\r",
									"    }\r",
									"     console.log(res);\r",
									"    \r",
									"    pm.test('Response should be Not Found', function () {\r",
									"        pm.expect(res.status).to.include(\"Not Found\");\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response code 404\", function() {\r",
									"        pm.expect(res.code).to.equal(404);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "name={{admin_name}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/owners/{{ownerID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"owners",
								"{{ownerID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete PetType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/pettypes/\" +  pm.globals.get(\"petTypeID\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"pm.sendRequest(getRequest, function (err, res) {\r",
									"    if (err) { \r",
									"        console.log(err);\r",
									"    }\r",
									"     console.log(res);\r",
									"    \r",
									"    pm.test('Response should be Not Found', function () {\r",
									"        pm.expect(res.status).to.include(\"Not Found\");\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response code 404\", function() {\r",
									"        pm.expect(res.code).to.equal(404);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "name={{admin_name}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/pettypes/{{petTypeID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pettypes",
								"{{petTypeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"url\") + \"/pets/\" +  pm.globals.get(\"petID\");\r",
									"\r",
									"const getRequest = {\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"};\r",
									"pm.sendRequest(getRequest, function (err, res) {\r",
									"    if (err) { \r",
									"        console.log(err);\r",
									"    }\r",
									"     console.log(res);\r",
									"    \r",
									"    pm.test('Response should be Not Found', function () {\r",
									"        pm.expect(res.status).to.include(\"Not Found\");\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response code 404\", function() {\r",
									"        pm.expect(res.code).to.equal(404);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "name={{admin_name}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/pets/{{petID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pets",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}